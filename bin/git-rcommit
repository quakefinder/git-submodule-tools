#!/bin/bash -e
## Recursive commit
## accepts the same arguments as commit
## but does a commit in each submodule as well

## read input, display help if necessary
if [[ "$@" == *--help* ]]; then
    cat<<EOF
 Recursive commit

 This command executes a recursive commit. It begins with the innermost
 submodules and works its way back. It is recommended to use the option
 -a, otherwise the script will not commit the change in a submodule
 pointer which changed because of a commit therein. Commit messages can 
 be supplied using the options -m <message> or -F <file>. See also 
 "git commit --help". 

 Usage:
    git rcommit [--non-recursive] ...

    --non-recursive: do not recurse into submodules
    ...: same arguments as git-commit
EOF
    exit 0;
fi

## from the git mailinglist:
function git
{
    LC_MESSAGES=C command git "$@"
} 
export git

args=""
recursive=1
a=0
## build quoted $args and check non-recursive and [-a|--all] args
for arg in "$@"
do 
    ## skip --non-recursive
    if [[ "$arg" != "--non-recursive" ]]; then
	args="$args '$arg'"
    else 
	recursive=0
    fi
    ## check for -a or --all
    case "$arg" in
	-a|--all)
	    a=1
	    ;;
	--)
	    ;;
	--*) 
	    ;;
	-*) ## option like -qa
	    if [[ "$arg" == *a* ]]; then
		a=1
	    fi
	    ;;
    esac
done

source rgit-find-super

## commit in submodules first
if [[ $recursive -eq 1 ]]; then
    if [ -f $(git rev-parse --show-toplevel)/.gitmodules ]; then
        #git submodule --quiet foreach "git rcommit \"$COMMIT_ARGS\"" || restore_wd_exit_1
	CMD='cd "$1"; git rcommit '"$args"
	git submodule --quiet foreach 'echo "$toplevel/$path"' | 
	xargs -r -n1 -P1 bash -c "$CMD" xargs || restore_wd_exit_1
    fi
fi

if [ $a -ne 1 ] && ! (git check-clean --unstaged --unmerged --exit-code --ignore-submodules=dirty) ; then
    cat >&2 <<EOF 
Warning in $PWD:
 Unstaged changes to files under version control.
 To add, use option -a to stage or add files manually with git add <file>.
EOF
fi 
    
## commit if dirty (or --allow-empty is given)
if [[ "$args" == *--allow-empty* ]] || ([ $a -eq 1 ] && ! (git check-clean --unstaged --unmerged --exit-code --ignore-submodules=dirty)) || ! (git check-clean --uncommitted --exit-code --ignore-submodules=dirty) ; 
then
    ## check for detached head
    if ! (git symbolic-ref -q HEAD > /dev/null) ; then
	cat >&2 <<EOF 
Error in $PWD:
 Refused to commit in detached head state. 
 See "git attach-head --help" for help on attaching the HEAD.
EOF
	restore_wd_exit_1
    fi

    echo "Committing in $PWD..."
    bash -c "git commit -q $args"
    
    if [ -f $(git rev-parse --show-toplevel)/.gitmodules ]; then
	## Syncronize submodules if necessary
	git converge-submodules -q
    fi
fi

cd "$rgit_start_directory"
